#define         UPX102  1
#include "lk_macros.S"

section         PEISDLL1
                cmpb    [esp + 8], 1
                jnz     reloc_end_jmp
section         PEMAIN01
                pusha
                mov     esi, offset start_of_compressed
                lea     edi, [esi + start_of_uncompressed]
section         PEICONS1
                incw    [edi + icon_offset]
section         PEICONS2
                addw    [edi + icon_offset], offset icon_delta
section         PETLSHAK
                mov     dword ptr [edi + tls_address], offset tls_value
section         PEMAIN02
                push    edi
section         PEMAIN03
                or      ebp, -1
section         N2BSMA10
                jmp     dcl1_n2b
decompr_literals_n2b:
                movsb
section         N2BFAS10
                jmp     dcl1_n2b
section         N2BFAS11
decompr_literalb_n2b:
                mov     al, [esi]
                inc     esi
                mov     [edi], al
                inc     edi
section         N2BDEC10
decompr_loop_n2b:
                add     ebx, ebx
                jnz     dcl2_n2b
dcl1_n2b:
        .ifc    32, 1
                add     ebx, ebx
                jnz     l1_1
        .endif
                mov     ebx, [esi]
                sub     esi, -4
                adc     ebx, ebx
l1_1:
dcl2_n2b:
section         N2BSMA20
                jc      decompr_literals_n2b
                xor     eax, eax
                inc     eax
section         N2BFAS20
    #ifndef UPX102
        mov al, [edi]
    #endif
                jc      decompr_literalb_n2b
                mov     eax, 1
section         N2BDEC20
loop1_n2b:
        .ifc    1, 1
                add     ebx, ebx
                jnz     l1_2
        .endif
                mov     ebx, [esi]
                sub     esi, -4
                adc     ebx, ebx
l1_2:
                adc     eax, eax
section         N2BSMA30
        .ifc    1, 1
                add     ebx, ebx
                jnz     l1_3
        .endif
                mov     ebx, [esi]
                sub     esi, -4
                adc     ebx, ebx
l1_3:
                jnc     loop1_n2b
section         N2BFAS30
                add     ebx, ebx
                jnc     loop1_n2b
                jnz     loopend1_n2b  
        .ifc    32, 1
                add     ebx, ebx
                jnz     l1_4
        .endif
                mov     ebx, [esi]
                sub     esi, -4
                adc     ebx, ebx
l1_4:
                jnc     loop1_n2b
loopend1_n2b:
section         N2BDEC30
                xor     ecx, ecx
                sub     eax, 3
                jb      decompr_ebpeax_n2b
                shl     eax, 8
                mov     al, [esi]
                inc     esi
                xor     eax, -1
                jz      decompr_end_n2b
                mov     ebp, eax
decompr_ebpeax_n2b:
        .ifc    1, 1
                add     ebx, ebx
                jnz     l1_5
        .endif
                mov     ebx, [esi]
                sub     esi, -4
                adc     ebx, ebx
l1_5:
                adc     ecx, ecx
        .ifc    1, 1
                add     ebx, ebx
                jnz     l1_6
        .endif
                mov     ebx, [esi]
                sub     esi, -4
                adc     ebx, ebx
l1_6:
                adc     ecx, ecx
                jnz     decompr_got_mlen_n2b
                inc     ecx
loop2_n2b:
        .ifc    1, 1
                add     ebx, ebx
                jnz     l1_7
        .endif
                mov     ebx, [esi]
                sub     esi, -4
                adc     ebx, ebx
l1_7:
                adc     ecx, ecx
section         N2BSMA40
        .ifc    1, 1
                add     ebx, ebx
                jnz     l1_8
        .endif
                mov     ebx, [esi]
                sub     esi, -4
                adc     ebx, ebx
l1_8:
                jnc     loop2_n2b
section         N2BFAS40
                add     ebx, ebx
                jnc     loop2_n2b
                jnz     loopend2_n2b
        .ifc    32, 1
                add     ebx, ebx
                jnz     l1_9
        .endif
                mov     ebx, [esi]
                sub     esi, -4
                adc     ebx, ebx
l1_9:
                jnc     loop2_n2b
loopend2_n2b:
section         N2BSMA50
                inc     ecx
                inc     ecx
section         N2BFAS50
                add     ecx, 2
section         N2BDEC50
decompr_got_mlen_n2b:
                cmp     ebp, -0xd00
                adc     ecx, 1
section         N2BSMA60
    #ifndef UPX102
                push    esi
    #else
                mov     edx, esi
    #endif
                lea     esi, [edi+ebp]
                rep
                movsb
    #ifndef UPX102
                pop     esi
    #else
                mov     esi, edx
    #endif
                jmp    decompr_loop_n2b
section         N2BFAS60
                lea     edx, [edi+ebp]
                cmp     ebp, -4
    #ifndef UPX102
        mov al, [edi+ecx]
    #endif
                jbe     decompr_copy4_n2b
loop3_n2b:
                mov     al, [edx]
                inc     edx
                mov     [edi], al
                inc     edi
                dec     ecx
                jnz     loop3_n2b
                jmp     decompr_loop_n2b
section         N2BFAS61
decompr_copy4_n2b:
                mov     eax, [edx]
                add     edx, 4
                mov     [edi], eax
                add     edi, 4
                sub     ecx, 4
                ja      decompr_copy4_n2b
                add     edi, ecx
                jmp     decompr_loop_n2b
section         N2BDEC60
decompr_end_n2b:
section         PEMAIN10
                pop     esi

section         PECTTPOS
                lea     edi, [esi + filter_buffer_start]
section         PECTTNUL
                mov     edi, esi
section         CALLTR00
                mov     ecx, offset filter_length
calltrickloop:
                mov     al, [edi]
                inc     edi
                sub     al, 0xE8
ct1:
                cmp     al, 1
                ja      calltrickloop
section         CTCLEVE1
                cmpb    [edi], offset filter_cto
                jnz     calltrickloop
section         CALLTR01
                mov     eax, [edi]
                mov     bl, [edi + 4]
section         CTBSHR01
                shr     ax, 8
section         CTBROR01
                xchg    ah, al
section         CTBSWA01
                rol     eax, 16
                xchg    ah, al
section         CALLTR02
                sub     eax, edi
                sub     bl, 0xE8
                add     eax, esi
                mov     [edi], eax
                add     edi, 5
                mov     al, bl
                loop    ct1

section         CALLTR10
                mov     ecx, offset filter_length
ctloop1:
section         CALLTRE8
                mov     al,0xE8
section         CALLTRE9
                mov     al,0xE9
section         CALLTR11
ctloop2:
                repnz
                scasb
                jnz     ctend
section         CTCLEVE2
                cmpb    [edi], offset filter_cto
                jnz     ctloop2
section         CALLTR12
                mov     eax, [edi]
section         CTBSHR11
                shr     ax, 8
section         CTBROR11
                xchg    ah, al
section         CTBSWA11
                rol     eax, 16
                xchg    ah, al
section         CALLTR13
                sub     eax, edi
                add     eax, esi
                stosd
                jmp     ctloop1
ctend:
section         ctok32.00
                mov     ecx, offset filter_length
                ctok32  esi, (offset filter_cto)
section PEIMPORT
                lea     edi, [esi + compressed_imports]
next_dll:
                mov     eax, [edi]
                or      eax, eax
                jz      imports_done
                mov     ebx, [edi+4]
                lea     eax, [eax + esi + start_of_imports]
                add     ebx, esi
                push    eax
                add     edi, 8
                call    [esi + LoadLibraryA]
                xchg    eax, ebp
next_func:
                mov     al, [edi]
                inc     edi
                or      al, al
                jz      next_dll
                mov     ecx, edi
section         PEIBYORD
                jns     byname
section         PEK32ORD
                jpe     not_kernel32
                mov     eax, [edi]
                add     edi, 4
                mov     eax, [eax + esi + kernel32_ordinals]
                jmp     next_imp
not_kernel32:
section         PEIMORD1
                movzxw  eax, word ptr [edi]
                inc     edi
                push    eax
                inc     edi
                .byte   0xb9
byname:
section         PEIMPOR2
                push    edi
                dec     eax
                repne
                scasb

                push    ebp
                call    [esi + GetProcAddress]
                or      eax, eax
                jz      imp_failed
next_imp:
                mov     [ebx], eax
                add     ebx, 4
                jmp     next_func
imp_failed:
section         PEIERDLL
                popa
                xor     eax, eax
                ret     0x0c
section         PEIEREXE
                call    [esi + ExitProcess]
section         PEIMDONE
imports_done:
section         PERELOC1
                lea     edi, [esi + start_of_relocs]
section         PERELOC2
                add     edi, 4
section         PERELOC3
                lea     ebx, [esi - 4]
section         RELOC320
reloc_main:
                xor     eax, eax
                mov     al, [edi]
                inc     edi
                or      eax, eax
                jz      reloc_endx
                cmp     al, 0xEF
                ja      reloc_fx
reloc_add:
                add     ebx, eax
#if 1
                mov     eax, [ebx]
                xchg    ah, al
                rol     eax, 16
                xchg    ah, al
                add     eax, esi
                mov     [ebx], eax
#else
                add     [ebx], esi
#endif
                jmp     reloc_main
reloc_fx:
                and     al, 0x0F
                shl     eax, 16
                mov     ax, [edi]
                add     edi, 2
section         REL32BIG
                or      eax, eax
                jnz     reloc_add
                mov     eax, [edi]
                add     edi, 4
section         RELOC32J
                jmp     reloc_add
reloc_endx:
section         REL32END
section         PERLOHI0
                xchg    edi, esi
                lea     ecx, [edi + reloc_delt]
       
section         PERELLO0
                .byte   0xA9
rello0:
                add     [edi + eax], cx
                lodsd
                or      eax, eax
                jnz     rello0
section         PERELHI0
                shr     ecx, 16
                .byte   0xA9
relhi0:
                add     [edi + eax], cx
                lodsd
                or      eax, eax
                jnz     relhi0
section         PEDEPHAK
                mov     ebp, [esi + VirtualProtect]
                lea     edi, [esi + vp_base]
                mov     ebx, offset vp_size

                push    eax

                push    esp
                push    4
                push    ebx
                push    edi
                call    ebp

  #if 0
                or      eax, eax
                jz      pedep9
  #endif

                lea     eax, [edi + swri]
                andb    [eax], 0x7f
                andb    [eax + 0x28], 0x7f

  #if 0
                push    esp
                push    2
  #else
                pop     eax
                push    eax
                push    esp
                push    eax
  #endif
                push    ebx
                push    edi
                call    ebp

pedep9:
                pop     eax

section         PETLSC
                lea     ebx, [esi + tls_module_base]
                lea     edi, [ebx + tls_handler_start + 1]
                push    edi
                xor     eax, eax
                stosb
                pop     ecx
                dec     ecx
                push    eax
                push    1
                push    ebx
                call    ecx

section         PEMAIN20
                popa
section         CLEARSTACK
                lea     eax, [esp - 128]
loop_cs:
                push    0
                cmp     esp, eax
                jnz     loop_cs
                sub     esp, -128

section         PEMAIN21
reloc_end_jmp:

section         PERETURN
                xor     eax, eax
                inc     eax
                ret     0x0C
section         PEDOJUMP
                jmp    original_entry

section         PETLSC2
tls_handler_start:
                jmp     end_of_tls_handler
                push    esi
                mov     esi, offset tls_callbacks_ptr
                cld
walk_tlsc_chain2:
                lodsd
                test    eax, eax
                jz      done_callbacks
                push    3
                pop     ecx
push_loop:
                push    dword ptr [esp + 0x10]
                dec     ecx
                jnz     push_loop
                call    eax
                jmp     walk_tlsc_chain2
done_callbacks:
                pop     esi
end_of_tls_handler:
                ret     0x0C
section         UPX1HEAD

                .byte   85,80,88,33     //  0  UPX_MAGIC_LE32
                .byte   161,216,208,213 //     UPX_MAGIC2_LE32
                .long   0               //  8  uncompressed adler32
                .long   0               // 12  compressed adler32

#ifdef COM
                .short  0               // 16  uncompressed len
                .short  0               // 18  compressed len
                .byte   0               // 20  filter
                .byte   45              // 21  header checksum
#elif defined(EXE)
                .byte   0,0,0           // 16  uncompressed len
                .byte   0,0,0           // 19  compressed len
                .byte   0,0,0           // 22  original file size
                .byte   0               // 25  filter
                .byte   45              // 26  header checksum
#else
                .long   0               // 16  uncompressed len
                .long   0               // 20  compressed len
                .long   0               // 24  original file size
                .byte   0               // 28  filter id
                .byte   0               // 29  filter cto
                .byte   0               //  unused
                .byte   45              // 31  header checksum
#endif

